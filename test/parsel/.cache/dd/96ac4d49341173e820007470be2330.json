{"id":"node_modules/core-js/internals/iterate.js","dependencies":[{"name":"C:\\git\\gb\\test\\parsel\\package.json","includedInParent":true,"mtime":1635323427712},{"name":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1635323417056},{"name":"../internals/global","loc":{"line":1,"column":21},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\iterate.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\global.js"},{"name":"../internals/function-bind-context","loc":{"line":2,"column":19},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\iterate.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\function-bind-context.js"},{"name":"../internals/function-call","loc":{"line":3,"column":19},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\iterate.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\function-call.js"},{"name":"../internals/an-object","loc":{"line":4,"column":23},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\iterate.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\an-object.js"},{"name":"../internals/try-to-string","loc":{"line":5,"column":26},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\iterate.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\try-to-string.js"},{"name":"../internals/is-array-iterator-method","loc":{"line":6,"column":36},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\iterate.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\is-array-iterator-method.js"},{"name":"../internals/length-of-array-like","loc":{"line":7,"column":32},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\iterate.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\length-of-array-like.js"},{"name":"../internals/object-is-prototype-of","loc":{"line":8,"column":28},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\iterate.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\object-is-prototype-of.js"},{"name":"../internals/get-iterator","loc":{"line":9,"column":26},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\iterate.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\get-iterator.js"},{"name":"../internals/get-iterator-method","loc":{"line":10,"column":32},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\iterate.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\get-iterator-method.js"},{"name":"../internals/iterator-close","loc":{"line":11,"column":28},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\iterate.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\iterator-close.js"}],"generated":{"js":"\nvar global = require('../internals/global');\nvar bind = require('../internals/function-bind-context');\nvar call = require('../internals/function-call');\nvar anObject = require('../internals/an-object');\nvar tryToString = require('../internals/try-to-string');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar getIterator = require('../internals/get-iterator');\nvar getIteratorMethod = require('../internals/get-iterator-method');\nvar iteratorClose = require('../internals/iterator-close');\n\nvar TypeError = global.TypeError;\n\nvar Result = function (stopped, result) {\n  this.stopped = stopped;\n  this.result = result;\n};\n\nvar ResultPrototype = Result.prototype;\n\nmodule.exports = function (iterable, unboundFunction, options) {\n  var that = options && options.that;\n  var AS_ENTRIES = !!(options && options.AS_ENTRIES);\n  var IS_ITERATOR = !!(options && options.IS_ITERATOR);\n  var INTERRUPTED = !!(options && options.INTERRUPTED);\n  var fn = bind(unboundFunction, that);\n  var iterator, iterFn, index, length, result, next, step;\n\n  var stop = function (condition) {\n    if (iterator) iteratorClose(iterator, 'normal', condition);\n    return new Result(true, condition);\n  };\n\n  var callFn = function (value) {\n    if (AS_ENTRIES) {\n      anObject(value);\n      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);\n    } return INTERRUPTED ? fn(value, stop) : fn(value);\n  };\n\n  if (IS_ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod(iterable);\n    if (!iterFn) throw TypeError(tryToString(iterable) + ' is not iterable');\n    // optimisation for array iterators\n    if (isArrayIteratorMethod(iterFn)) {\n      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {\n        result = callFn(iterable[index]);\n        if (result && isPrototypeOf(ResultPrototype, result)) return result;\n      } return new Result(false);\n    }\n    iterator = getIterator(iterable, iterFn);\n  }\n\n  next = iterator.next;\n  while (!(step = call(next, iterator)).done) {\n    try {\n      result = callFn(step.value);\n    } catch (error) {\n      iteratorClose(iterator, 'throw', error);\n    }\n    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;\n  } return new Result(false);\n};\n"},"sourceMaps":null,"error":null,"hash":"7a9b0d4054e562f810c3b1c7d659e1e5","cacheData":{"env":{}}}