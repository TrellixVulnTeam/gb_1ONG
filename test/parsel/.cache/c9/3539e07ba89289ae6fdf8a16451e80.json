{"id":"node_modules/core-js/internals/array-reduce.js","dependencies":[{"name":"C:\\git\\gb\\test\\parsel\\package.json","includedInParent":true,"mtime":1635323427712},{"name":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1635323417056},{"name":"../internals/global","loc":{"line":1,"column":21},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\array-reduce.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\global.js"},{"name":"../internals/a-callable","loc":{"line":2,"column":24},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\array-reduce.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\a-callable.js"},{"name":"../internals/to-object","loc":{"line":3,"column":23},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\array-reduce.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\to-object.js"},{"name":"../internals/indexed-object","loc":{"line":4,"column":28},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\array-reduce.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\indexed-object.js"},{"name":"../internals/length-of-array-like","loc":{"line":5,"column":32},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\array-reduce.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\length-of-array-like.js"}],"generated":{"js":"\nvar global = require('../internals/global');\nvar aCallable = require('../internals/a-callable');\nvar toObject = require('../internals/to-object');\nvar IndexedObject = require('../internals/indexed-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\nvar TypeError = global.TypeError;\n\n// `Array.prototype.{ reduce, reduceRight }` methods implementation\nvar createMethod = function (IS_RIGHT) {\n  return function (that, callbackfn, argumentsLength, memo) {\n    aCallable(callbackfn);\n    var O = toObject(that);\n    var self = IndexedObject(O);\n    var length = lengthOfArrayLike(O);\n    var index = IS_RIGHT ? length - 1 : 0;\n    var i = IS_RIGHT ? -1 : 1;\n    if (argumentsLength < 2) while (true) {\n      if (index in self) {\n        memo = self[index];\n        index += i;\n        break;\n      }\n      index += i;\n      if (IS_RIGHT ? index < 0 : length <= index) {\n        throw TypeError('Reduce of empty array with no initial value');\n      }\n    }\n    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {\n      memo = callbackfn(memo, self[index], index, O);\n    }\n    return memo;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.reduce` method\n  // https://tc39.es/ecma262/#sec-array.prototype.reduce\n  left: createMethod(false),\n  // `Array.prototype.reduceRight` method\n  // https://tc39.es/ecma262/#sec-array.prototype.reduceright\n  right: createMethod(true)\n};\n"},"sourceMaps":null,"error":null,"hash":"500c3caa1c784d83f79e4665a5aa3559","cacheData":{"env":{}}}