{"id":"node_modules/core-js/modules/es.string.substr.js","dependencies":[{"name":"C:\\git\\gb\\test\\parsel\\package.json","includedInParent":true,"mtime":1635323427712},{"name":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1635323417056},{"name":"../internals/export","loc":{"line":2,"column":16},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.substr.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\export.js"},{"name":"../internals/function-uncurry-this","loc":{"line":3,"column":26},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.substr.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\function-uncurry-this.js"},{"name":"../internals/require-object-coercible","loc":{"line":4,"column":37},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.substr.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\require-object-coercible.js"},{"name":"../internals/to-integer-or-infinity","loc":{"line":5,"column":34},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.substr.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\to-integer-or-infinity.js"},{"name":"../internals/to-string","loc":{"line":6,"column":23},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.substr.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\to-string.js"}],"generated":{"js":"'use strict';\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar toString = require('../internals/to-string');\n\nvar stringSlice = uncurryThis(''.slice);\nvar max = Math.max;\nvar min = Math.min;\n\n// eslint-disable-next-line unicorn/prefer-string-slice -- required for testing\nvar FORCED = !''.substr || 'ab'.substr(-1) !== 'b';\n\n// `String.prototype.substr` method\n// https://tc39.es/ecma262/#sec-string.prototype.substr\n$({ target: 'String', proto: true, forced: FORCED }, {\n  substr: function substr(start, length) {\n    var that = toString(requireObjectCoercible(this));\n    var size = that.length;\n    var intStart = toIntegerOrInfinity(start);\n    var intLength, intEnd;\n    if (intStart === Infinity) intStart = 0;\n    if (intStart < 0) intStart = max(size + intStart, 0);\n    intLength = length === undefined ? size : toIntegerOrInfinity(length);\n    if (intLength <= 0 || intLength === Infinity) return '';\n    intEnd = min(intStart + intLength, size);\n    return intStart >= intEnd ? '' : stringSlice(that, intStart, intEnd);\n  }\n});\n"},"sourceMaps":null,"error":null,"hash":"9be7bec43b45b3e19326346441ef94b7","cacheData":{"env":{}}}