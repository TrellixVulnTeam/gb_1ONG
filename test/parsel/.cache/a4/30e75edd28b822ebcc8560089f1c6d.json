{"id":"node_modules/core-js/internals/flatten-into-array.js","dependencies":[{"name":"C:\\git\\gb\\test\\parsel\\package.json","includedInParent":true,"mtime":1635323427712},{"name":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1635323417056},{"name":"../internals/global","loc":{"line":2,"column":21},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\flatten-into-array.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\global.js"},{"name":"../internals/is-array","loc":{"line":3,"column":22},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\flatten-into-array.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\is-array.js"},{"name":"../internals/length-of-array-like","loc":{"line":4,"column":32},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\flatten-into-array.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\length-of-array-like.js"},{"name":"../internals/function-bind-context","loc":{"line":5,"column":19},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\flatten-into-array.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\function-bind-context.js"}],"generated":{"js":"\n'use strict';\nvar global = require('../internals/global');\nvar isArray = require('../internals/is-array');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar bind = require('../internals/function-bind-context');\n\nvar TypeError = global.TypeError;\n\n// `FlattenIntoArray` abstract operation\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? bind(mapper, thisArg) : false;\n  var element, elementLen;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      if (depth > 0 && isArray(element)) {\n        elementLen = lengthOfArrayLike(element);\n        targetIndex = flattenIntoArray(target, original, element, elementLen, targetIndex, depth - 1) - 1;\n      } else {\n        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n};\n\nmodule.exports = flattenIntoArray;\n"},"sourceMaps":null,"error":null,"hash":"0420cffe1d134a9106e8bd6b631463be","cacheData":{"env":{}}}