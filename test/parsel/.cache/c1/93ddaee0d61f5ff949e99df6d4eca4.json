{"id":"node_modules/core-js/internals/call-with-safe-iteration-closing.js","dependencies":[{"name":"C:\\git\\gb\\test\\parsel\\package.json","includedInParent":true,"mtime":1635323427712},{"name":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1635323417056},{"name":"../internals/an-object","loc":{"line":1,"column":23},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\call-with-safe-iteration-closing.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\an-object.js"},{"name":"../internals/iterator-close","loc":{"line":2,"column":28},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\call-with-safe-iteration-closing.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\iterator-close.js"}],"generated":{"js":"var anObject = require('../internals/an-object');\nvar iteratorClose = require('../internals/iterator-close');\n\n// call something on iterator step with safe closing on error\nmodule.exports = function (iterator, fn, value, ENTRIES) {\n  try {\n    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);\n  } catch (error) {\n    iteratorClose(iterator, 'throw', error);\n  }\n};\n"},"sourceMaps":null,"error":null,"hash":"577fb64e9bc041337231cc806022f046","cacheData":{"env":{}}}