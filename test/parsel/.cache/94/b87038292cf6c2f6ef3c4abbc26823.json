{"id":"node_modules/core-js/internals/export.js","dependencies":[{"name":"C:\\git\\gb\\test\\parsel\\package.json","includedInParent":true,"mtime":1635323427712},{"name":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1635323417056},{"name":"../internals/global","loc":{"line":1,"column":21},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\export.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\global.js"},{"name":"../internals/object-get-own-property-descriptor","loc":{"line":2,"column":39},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\export.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\object-get-own-property-descriptor.js"},{"name":"../internals/create-non-enumerable-property","loc":{"line":3,"column":42},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\export.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\create-non-enumerable-property.js"},{"name":"../internals/redefine","loc":{"line":4,"column":23},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\export.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\redefine.js"},{"name":"../internals/set-global","loc":{"line":5,"column":24},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\export.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\set-global.js"},{"name":"../internals/copy-constructor-properties","loc":{"line":6,"column":40},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\export.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\copy-constructor-properties.js"},{"name":"../internals/is-forced","loc":{"line":7,"column":23},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\export.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\is-forced.js"}],"generated":{"js":"\nvar global = require('../internals/global');\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\nvar redefine = require('../internals/redefine');\nvar setGlobal = require('../internals/set-global');\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\nvar isForced = require('../internals/is-forced');\n\n/*\n  options.target      - name of the target object\n  options.global      - target is the global object\n  options.stat        - export as static methods of target\n  options.proto       - export as prototype methods of target\n  options.real        - real prototype method for the `pure` version\n  options.forced      - export even if the native feature is available\n  options.bind        - bind methods to the target, required for the `pure` version\n  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n  options.sham        - add a flag to not completely full polyfills\n  options.enumerable  - export as enumerable property\n  options.noTargetGet - prevent calling a getter on target\n  options.name        - the .name of the function if it does not match the key\n*/\nmodule.exports = function (options, source) {\n  var TARGET = options.target;\n  var GLOBAL = options.global;\n  var STATIC = options.stat;\n  var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  if (GLOBAL) {\n    target = global;\n  } else if (STATIC) {\n    target = global[TARGET] || setGlobal(TARGET, {});\n  } else {\n    target = (global[TARGET] || {}).prototype;\n  }\n  if (target) for (key in source) {\n    sourceProperty = source[key];\n    if (options.noTargetGet) {\n      descriptor = getOwnPropertyDescriptor(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } else targetProperty = target[key];\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n    // contained in target\n    if (!FORCED && targetProperty !== undefined) {\n      if (typeof sourceProperty == typeof targetProperty) continue;\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    // add a flag to not completely full polyfills\n    if (options.sham || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(sourceProperty, 'sham', true);\n    }\n    // extend global\n    redefine(target, key, sourceProperty, options);\n  }\n};\n"},"sourceMaps":null,"error":null,"hash":"58edee4721c64181d2a5343058ddd674","cacheData":{"env":{}}}