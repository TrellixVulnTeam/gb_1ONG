{"id":"node_modules/core-js/modules/es.string.replace-all.js","dependencies":[{"name":"C:\\git\\gb\\test\\parsel\\package.json","includedInParent":true,"mtime":1635323427712},{"name":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\package.json","includedInParent":true,"mtime":1635323417056},{"name":"../internals/export","loc":{"line":2,"column":16},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.replace-all.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\export.js"},{"name":"../internals/global","loc":{"line":3,"column":21},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.replace-all.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\global.js"},{"name":"../internals/function-call","loc":{"line":4,"column":19},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.replace-all.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\function-call.js"},{"name":"../internals/function-uncurry-this","loc":{"line":5,"column":26},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.replace-all.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\function-uncurry-this.js"},{"name":"../internals/require-object-coercible","loc":{"line":6,"column":37},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.replace-all.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\require-object-coercible.js"},{"name":"../internals/is-callable","loc":{"line":7,"column":25},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.replace-all.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\is-callable.js"},{"name":"../internals/is-regexp","loc":{"line":8,"column":23},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.replace-all.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\is-regexp.js"},{"name":"../internals/to-string","loc":{"line":9,"column":23},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.replace-all.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\to-string.js"},{"name":"../internals/get-method","loc":{"line":10,"column":24},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.replace-all.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\get-method.js"},{"name":"../internals/regexp-flags","loc":{"line":11,"column":26},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.replace-all.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\regexp-flags.js"},{"name":"../internals/get-substitution","loc":{"line":12,"column":30},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.replace-all.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\get-substitution.js"},{"name":"../internals/well-known-symbol","loc":{"line":13,"column":30},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.replace-all.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\well-known-symbol.js"},{"name":"../internals/is-pure","loc":{"line":14,"column":22},"parent":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\modules\\es.string.replace-all.js","resolved":"C:\\git\\gb\\test\\parsel\\node_modules\\core-js\\internals\\is-pure.js"}],"generated":{"js":"\n'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar call = require('../internals/function-call');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar isCallable = require('../internals/is-callable');\nvar isRegExp = require('../internals/is-regexp');\nvar toString = require('../internals/to-string');\nvar getMethod = require('../internals/get-method');\nvar regExpFlags = require('../internals/regexp-flags');\nvar getSubstitution = require('../internals/get-substitution');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\n\nvar REPLACE = wellKnownSymbol('replace');\nvar RegExpPrototype = RegExp.prototype;\nvar TypeError = global.TypeError;\nvar getFlags = uncurryThis(regExpFlags);\nvar indexOf = uncurryThis(''.indexOf);\nvar replace = uncurryThis(''.replace);\nvar stringSlice = uncurryThis(''.slice);\nvar max = Math.max;\n\nvar stringIndexOf = function (string, searchValue, fromIndex) {\n  if (fromIndex > string.length) return -1;\n  if (searchValue === '') return fromIndex;\n  return indexOf(string, searchValue, fromIndex);\n};\n\n// `String.prototype.replaceAll` method\n// https://tc39.es/ecma262/#sec-string.prototype.replaceall\n$({ target: 'String', proto: true }, {\n  replaceAll: function replaceAll(searchValue, replaceValue) {\n    var O = requireObjectCoercible(this);\n    var IS_REG_EXP, flags, replacer, string, searchString, functionalReplace, searchLength, advanceBy, replacement;\n    var position = 0;\n    var endOfLastMatch = 0;\n    var result = '';\n    if (searchValue != null) {\n      IS_REG_EXP = isRegExp(searchValue);\n      if (IS_REG_EXP) {\n        flags = toString(requireObjectCoercible('flags' in RegExpPrototype\n          ? searchValue.flags\n          : getFlags(searchValue)\n        ));\n        if (!~indexOf(flags, 'g')) throw TypeError('`.replaceAll` does not allow non-global regexes');\n      }\n      replacer = getMethod(searchValue, REPLACE);\n      if (replacer) {\n        return call(replacer, searchValue, O, replaceValue);\n      } else if (IS_PURE && IS_REG_EXP) {\n        return replace(toString(O), searchValue, replaceValue);\n      }\n    }\n    string = toString(O);\n    searchString = toString(searchValue);\n    functionalReplace = isCallable(replaceValue);\n    if (!functionalReplace) replaceValue = toString(replaceValue);\n    searchLength = searchString.length;\n    advanceBy = max(1, searchLength);\n    position = stringIndexOf(string, searchString, 0);\n    while (position !== -1) {\n      replacement = functionalReplace\n        ? toString(replaceValue(searchString, position, string))\n        : getSubstitution(searchString, string, position, [], undefined, replaceValue);\n      result += stringSlice(string, endOfLastMatch, position) + replacement;\n      endOfLastMatch = position + searchLength;\n      position = stringIndexOf(string, searchString, position + advanceBy);\n    }\n    if (endOfLastMatch < string.length) {\n      result += stringSlice(string, endOfLastMatch);\n    }\n    return result;\n  }\n});\n"},"sourceMaps":null,"error":null,"hash":"136ea2ff3db69876f490e8c926597ecc","cacheData":{"env":{}}}